{"version":3,"sources":["webpack:///request (ignored)","webpack:///node_modules/eth-json-rpc-errors/src/classes.js","webpack:///node_modules/web3-provider-engine/subproviders/rpc.js","webpack:///node_modules/bnc-onboard/dist/esm/providerEngine-8b8d4e67.js","webpack:///node_modules/eth-json-rpc-errors/src/utils.js","webpack:///node_modules/eth-json-rpc-errors/index.js","webpack:///node_modules/eth-json-rpc-errors/src/errors.js"],"names":["safeStringify","EthereumRpcError","code","message","data","Number","isInteger","Error","undefined","serialized","stack","serialize","stringifyReplacer","EthereumProviderError","isValidEthProviderCode","_","value","module","exports","inherits","createPayload","Subprovider","ethErrors","serializeError","RpcSource","opts","self","rpcUrl","prototype","handleRequest","payload","next","end","targetUrl","sanitizedPayload","sanitizePayload","newPayload","xhr","uri","method","headers","body","JSON","stringify","rejectUnauthorized","timeout","err","res","statusCode","rpc","methodNotFound","msg","parse","console","error","result","id","jsonrpc","params","createProvider","config","getAccounts","signTransaction","processMessage","processPersonalMessage","signMessage","signPersonalMessage","pollingInterval","blockPollingInterval","idMgmt","rpcSubProvider","includes","concat","provider","addProvider","start","on","errorValues","FALLBACK_ERROR_CODE","internal","JSON_RPC_SERVER_ERROR_MESSAGE","FALLBACK_MESSAGE","FALLBACK_ERROR","getMessageFromCode","fallbackMessage","codeString","toString","isJsonRpcServerError","isValidCode","fallbackError","hasOwnProperty","originalError","assignOriginalError","Array","isArray","Object","assign","ERROR_CODES","getEthJsonRpcError","invalidRequest","invalidParams","server","invalidInput","resourceNotFound","resourceUnavailable","transactionRejected","methodNotSupported","userRejectedRequest","getEthProviderError","unauthorized","unsupportedMethod","custom","validateOpts"],"mappings":"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","file":"providerEngine-8b8d4e67-js-es5.js","sourcesContent":["/* (ignored) */","\nconst safeStringify = require('fast-safe-stringify')\n\n/**\n * @class JsonRpcError\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors\n * per EIP 1474.\n * Permits any integer error code.\n */\nclass EthereumRpcError extends Error {\n\n  /**\n   * Create an Ethereum JSON RPC error.\n   * \n   * @param {number} code - The integer error code.\n   * @param {string} message - The string message.\n   * @param {any} [data] - The error data.\n   */\n  constructor (code, message, data) {\n\n    if (!Number.isInteger(code)) throw new Error(\n      '\"code\" must be an integer.'\n    )\n    if (!message || typeof message !== 'string') throw new Error(\n      '\"message\" must be a nonempty string.'\n    )\n\n    super(message)\n    this.code = code\n    if (data !== undefined) this.data = data\n  }\n\n  /**\n   * Returns a plain object with all public class properties.\n   * \n   * @returns {object} The serialized error. \n   */\n  serialize() {\n    const serialized = {\n      code: this.code,\n      message: this.message,\n    }\n    if (this.data !== undefined) serialized.data = this.data\n    if (this.stack) serialized.stack = this.stack\n    return serialized\n  }\n\n  /**\n   * Return a string representation of the serialized error, omitting\n   * any circular references.\n   * \n   * @returns {string} The serialized error as a string.\n   */\n  toString() {\n    return safeStringify(\n      this.serialize(),\n      stringifyReplacer,\n      2\n    )\n  }\n}\n\n/**\n * @class EthereumRpcError\n * Error subclass implementing Ethereum Provider errors per EIP 1193.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\nclass EthereumProviderError extends EthereumRpcError {\n\n  /**\n   * Create an Ethereum JSON RPC error.\n   * \n   * @param {number} code - The integer error code, in the [ 1000 <= 4999 ] range.\n   * @param {string} message - The string message.\n   * @param {any} [data] - The error data.\n   */\n  constructor(code, message, data) {\n\n    if (!isValidEthProviderCode(code)) {\n      throw new Error(\n        '\"code\" must be an integer such that: 1000 <= code <= 4999'\n      )\n    }\n\n    super(code, message, data)\n  }\n}\n\n// Internal\n\nfunction isValidEthProviderCode(code) {\n  return Number.isInteger(code) && code >= 1000 && code <= 4999\n}\n\nfunction stringifyReplacer(_, value) {\n  if (value === '[Circular]') {\n    return\n  }\n  return value\n}\n\n// Exports\n\nmodule.exports =  {\n  EthereumRpcError,\n  EthereumProviderError\n}\n","const xhr = process.browser ? require('xhr') : require('request')\nconst inherits = require('util').inherits\nconst createPayload = require('../util/create-payload.js')\nconst Subprovider = require('./subprovider.js')\nconst { ethErrors, serializeError } = require('eth-json-rpc-errors')\n\n\nmodule.exports = RpcSource\n\ninherits(RpcSource, Subprovider)\n\nfunction RpcSource(opts) {\n  const self = this\n  self.rpcUrl = opts.rpcUrl\n}\n\nRpcSource.prototype.handleRequest = function(payload, next, end){\n  const self = this\n  const targetUrl = self.rpcUrl\n\n  // overwrite id to conflict with other concurrent users\n  const sanitizedPayload = sanitizePayload(payload)\n  const newPayload = createPayload(sanitizedPayload)\n\n  xhr({\n    uri: targetUrl,\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(newPayload),\n    rejectUnauthorized: false,\n    timeout: 20000,\n  }, function(err, res, body) {\n    if (err) return end(serializeError(err))\n\n    // check for error code\n    switch (res.statusCode) {\n      case 405:\n        return end(ethErrors.rpc.methodNotFound())\n      case 504: // Gateway timeout\n        return (function(){\n          let msg = `Gateway timeout. The request took too long to process. `\n          msg += `This can happen when querying logs over too wide a block range.`\n          const err = new Error(msg)\n          return end(serializeError(err))\n        })()\n      case 429: // Too many requests (rate limiting)\n        return (function(){\n          const err = new Error(`Too Many Requests`)\n          return end(serializeError(err))\n        })()\n      default:\n        if (res.statusCode != 200) {\n          const msg = 'Unknown Error: ' + res.body\n          const err = new Error(msg)\n          return end(serializeError(err))\n        }\n    }\n\n    // parse response\n    let data\n    try {\n      data = JSON.parse(body)\n    } catch (err) {\n      console.error(err.stack)\n      return end(serializeError(err))\n    }\n    if (data.error) return end(data.error)\n\n    end(null, data.result)\n  })\n}\n\n// drops any non-standard params\nfunction sanitizePayload (payload) {\n  return {\n    id: payload.id,\n    jsonrpc: payload.jsonrpc,\n    method: payload.method,\n    params: payload.params,\n  }\n}","import 'regenerator-runtime/runtime';\nimport { g as get_store_value, a as app } from './onboard-87b65846.js';\nimport 'bignumber.js';\nimport 'bnc-sdk';\nimport 'bowser';\nimport Web3ProviderEngine from 'web3-provider-engine';\nimport RpcSource from 'web3-provider-engine/subproviders/rpc';\nimport HookedWalletSubprovider from 'web3-provider-engine/subproviders/hooked-wallet';\nimport SubscriptionSubprovider from 'web3-provider-engine/subproviders/subscriptions';\nimport FilterSubprovider from 'web3-provider-engine/subproviders/filters';\n\nfunction createProvider(config) {\n  var getAccounts = config.getAccounts,\n      signTransaction = config.signTransaction,\n      rpcUrl = config.rpcUrl,\n      processMessage = config.processMessage,\n      processPersonalMessage = config.processPersonalMessage,\n      signMessage = config.signMessage,\n      signPersonalMessage = config.signPersonalMessage;\n  var pollingInterval = get_store_value(app).blockPollingInterval;\n  var idMgmt = getAccounts && new HookedWalletSubprovider({\n    getAccounts: getAccounts,\n    signTransaction: signTransaction,\n    processMessage: processMessage,\n    processPersonalMessage: processPersonalMessage,\n    signMessage: signMessage,\n    signPersonalMessage: signPersonalMessage\n  });\n  var rpcSubProvider = new RpcSource({\n    rpcUrl: rpcUrl.includes('http') ? rpcUrl : \"https://\".concat(rpcUrl)\n  });\n  var provider = new Web3ProviderEngine({\n    pollingInterval: pollingInterval\n  });\n  provider.addProvider(new SubscriptionSubprovider());\n  provider.addProvider(new FilterSubprovider());\n  idMgmt && provider.addProvider(idMgmt);\n  provider.addProvider(rpcSubProvider);\n  provider.start();\n  provider.on('error', console.error);\n  return provider;\n}\n\nexport default createProvider;","\nconst errorValues = require('./errorValues.json')\nconst FALLBACK_ERROR_CODE = require('./errorCodes.json').rpc.internal\nconst { EthereumRpcError } = require('./classes')\n\nconst JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.'\n\nconst FALLBACK_MESSAGE = 'Unspecified error message. This is a bug, please report it.'\n\nconst FALLBACK_ERROR = {\n  code: FALLBACK_ERROR_CODE,\n  message: getMessageFromCode(FALLBACK_ERROR_CODE)\n}\n\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n * \n * @param {number} code - The integer error code\n * @param {string} fallbackMessage - The fallback message\n * @return {string} The corresponding message or the fallback message\n */\nfunction getMessageFromCode(code, fallbackMessage = FALLBACK_MESSAGE) {\n\n  if (Number.isInteger(code)) {\n\n    const codeString = code.toString()\n    if (errorValues[codeString]) return errorValues[codeString].message\n\n    if (isJsonRpcServerError(code)) return JSON_RPC_SERVER_ERROR_MESSAGE\n\n    // TODO: allow valid codes and messages to be extended\n    // // EIP 1193 Status Codes\n    // if (code >= 4000 && code <= 4999) return Something?\n  }\n  return fallbackMessage\n}\n\n/**\n * Returns whether the given code is valid.\n * A code is only valid if it has a message.\n * \n * @param {number} code - The code to check\n * @return {boolean} true if the code is valid, false otherwise.\n */\nfunction isValidCode(code) {\n\n  if (!Number.isInteger(code)) return false\n\n  const codeString = code.toString()\n  if (errorValues[codeString]) return true\n\n  if (isJsonRpcServerError(code)) return true\n\n  // TODO: allow valid codes and messages to be extended\n  // // EIP 1193 Status Codes\n  // if (code >= 4000 && code <= 4999) return true\n\n  return false\n}\n\n/**\n * Serializes the given error to an Ethereum JSON RPC-compatible error object.\n * Merely copies the given error's values if it is already compatible.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.originalError property.\n * Adds a 'stack' property if it exists on the given error.\n *\n * @param {any} error - The error to serialize.\n * @param {object} fallbackError - The custom fallback error values if the\n * given error is invalid.\n * @return {object} A standardized error object.\n */\nfunction serializeError (error, fallbackError = FALLBACK_ERROR) {\n\n  if (\n    !fallbackError || \n    !Number.isInteger(fallbackError.code) ||\n    typeof fallbackError.message !== 'string'\n  ) {\n    throw new Error(\n      'fallbackError must contain integer number code and string message.'\n    )\n  }\n\n  if (error instanceof EthereumRpcError) {\n    return error.serialize()\n  }\n\n  const serialized = {}\n\n  if (error && isValidCode(error.code)) {\n\n    serialized.code = error.code\n\n    if (error.message && typeof error.message === 'string') {\n      serialized.message = error.message\n      if (error.hasOwnProperty('data')) serialized.data = error.data\n    } else {\n      serialized.message = getMessageFromCode(serialized.code)\n      serialized.data = { originalError: assignOriginalError(error) }\n    }\n\n  } else {\n    serialized.code = fallbackError.code\n    serialized.message = (\n      error && error.message\n        ? error.message\n        : fallbackError.message\n    )\n    serialized.data = { originalError: assignOriginalError(error) }\n  }\n\n  if (error && error.stack) serialized.stack = error.stack\n  return serialized\n}\n\n// Internal\n\nfunction isJsonRpcServerError (code) {\n  return code >= -32099 && code <= -32000\n}\n\nfunction assignOriginalError (error) {\n  if (error && typeof error === 'object' && !Array.isArray(error)) {\n    return Object.assign({}, error)\n  }\n  return error\n}\n\n// Exports\n\nmodule.exports = {\n  getMessageFromCode,\n  isValidCode,\n  serializeError,\n  JSON_RPC_SERVER_ERROR_MESSAGE,\n}\n","\nconst { EthereumRpcError, EthereumProviderError } = require('./src/classes')\nconst {\n  serializeError, getMessageFromCode,\n} = require('./src/utils')\nconst ethErrors = require('./src/errors')\nconst ERROR_CODES = require('./src/errorCodes.json')\n\nmodule.exports = {\n  ethErrors,\n  EthereumRpcError,\n  EthereumProviderError,\n  serializeError,\n  getMessageFromCode,\n  /** @type ErrorCodes */\n  ERROR_CODES,\n}\n\n// Types\n\n/**\n * @typedef {Object} EthereumProviderErrorCodes\n * @property {number} userRejectedRequest\n * @property {number} unauthorized\n * @property {number} unsupportedMethod\n */\n\n/**\n * @typedef {Object} EthereumRpcErrorCodes\n * @property {number} parse\n * @property {number} invalidRequest\n * @property {number} invalidParams\n * @property {number} methodNotFound\n * @property {number} internal\n * @property {number} invalidInput\n * @property {number} resourceNotFound\n * @property {number} resourceUnavailable\n * @property {number} transactionRejected\n * @property {number} methodNotSupported\n */\n\n/**\n * @typedef ErrorCodes\n * @property {EthereumRpcErrorCodes} rpc\n * @property {EthereumProviderErrorCodes} provider\n */\n","\nconst { EthereumRpcError, EthereumProviderError } = require('./classes')\nconst { getMessageFromCode } = require('./utils')\nconst ERROR_CODES = require('./errorCodes.json')\n\nmodule.exports = {\n  rpc: {\n    /**\n     * Get a JSON RPC 2.0 Parse (-32700) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    parse: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.parse, opts\n    ),\n\n    /**\n     * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    invalidRequest: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.invalidRequest, opts\n    ),\n\n    /**\n     * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    invalidParams: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.invalidParams, opts\n    ),\n\n    /**\n     * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    methodNotFound: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.methodNotFound, opts\n    ),\n\n    /**\n     * Get a JSON RPC 2.0 Internal (-32603) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    internal: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.internal, opts\n    ),\n\n    /**\n     * Get a JSON RPC 2.0 Server error.\n     * Permits integer error codes in the [ -32099 <= -32005 ] range.\n     * Codes -32000 through -32004 are reserved by EIP 1474.\n     * \n     * @param {Object|string} opts - Options object\n     * @param {number} opts.code - The error code\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    server: (opts) => {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum RPC Server errors must provide single object argument.')\n      }\n      const { code } = opts\n      if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n        throw new Error(\n          '\"code\" must be an integer such that: -32099 <= code <= -32005'\n        )\n      }\n      return getEthJsonRpcError(code, opts)\n    },\n\n    /**\n     * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    invalidInput: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.invalidInput, opts\n    ),\n\n    /**\n     * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    resourceNotFound: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.resourceNotFound, opts\n    ),\n\n    /**\n     * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    resourceUnavailable: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.resourceUnavailable, opts\n    ),\n\n    /**\n     * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    transactionRejected: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.transactionRejected, opts\n    ),\n\n    /**\n     * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    methodNotSupported: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.methodNotSupported, opts\n    ),\n  },\n\n  provider: {\n    /**\n     * Get an Ethereum Provider User Rejected Request (4001) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    userRejectedRequest: (opts) => {\n      return getEthProviderError(\n        ERROR_CODES.provider.userRejectedRequest, opts\n      )\n    },\n\n    /**\n     * Get an Ethereum Provider Unauthorized (4100) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    unauthorized: (opts) => {\n      return getEthProviderError(\n        ERROR_CODES.provider.unauthorized, opts\n      )\n    },\n\n    /**\n     * Get an Ethereum Provider Unsupported Method (4200) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    unsupportedMethod: (opts) => {\n      return getEthProviderError(\n        ERROR_CODES.provider.unsupportedMethod, opts\n      )\n    },\n\n    /**\n     * Get a custom Ethereum Provider error.\n     * \n     * @param {Object|string} opts - Options object\n     * @param {number} opts.code - The error code\n     * @param {string} opts.message - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    custom: (opts) => {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum Provider custom errors must provide single object argument.')\n      }\n      const { code, message, data } = opts\n      if (!message || typeof message !== 'string') throw new Error(\n        '\"message\" must be a nonempty string'\n      )\n      return new EthereumProviderError(code, message, data)\n    },\n  },\n}\n\n// Internal\n\nfunction getEthJsonRpcError(code, opts) {\n  const [ message, data ] = validateOpts(opts)\n  return new EthereumRpcError(\n    code,\n    message || getMessageFromCode(code),\n    data\n  )\n}\n\nfunction getEthProviderError(code, opts) {\n  const [ message, data ] = validateOpts(opts)\n  return new EthereumProviderError(\n    code,\n    message || getMessageFromCode(code),\n    data\n  )\n}\n\nfunction validateOpts (opts) {\n  let message, data\n  if (opts) {\n    if (typeof opts === 'string') {\n      message = opts\n    } else if (typeof opts === 'object' && !Array.isArray(opts)) {\n      message = opts.message\n      data = opts.data\n    }\n  }\n  return [ message, data ]\n}\n"]}